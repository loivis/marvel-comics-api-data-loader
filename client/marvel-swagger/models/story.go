// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Story story
// swagger:model Story
type Story struct {

	// A resource list of characters which appear in this story.
	Characters *CharacterList `json:"characters,omitempty"`

	// A resource list containing comics in which this story takes place.
	Comics *ComicList `json:"comics,omitempty"`

	// A resource list of creators who worked on this story.
	Creators *CreatorList `json:"creators,omitempty"`

	// A short description of the story.
	Description string `json:"description,omitempty"`

	// A resource list of the events in which this story appears.
	Events *EventList `json:"events,omitempty"`

	// The unique ID of the story resource.
	ID int32 `json:"id,omitempty"`

	// The date the resource was most recently modified.
	Modified string `json:"modified,omitempty"`

	// A summary representation of the issue in which this story was originally published.
	Originalissue *ComicSummary `json:"originalissue,omitempty"`

	// The canonical URL identifier for this resource.
	ResourceURI string `json:"resourceURI,omitempty"`

	// A resource list containing series in which this story appears.
	Series *SeriesList `json:"series,omitempty"`

	// The representative image for this story.
	Thumbnail *Image `json:"thumbnail,omitempty"`

	// The story title.
	Title string `json:"title,omitempty"`

	// The story type e.g. interior story, cover, text story.
	Type string `json:"type,omitempty"`
}

// Validate validates this story
func (m *Story) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCharacters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalissue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThumbnail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Story) validateCharacters(formats strfmt.Registry) error {

	if swag.IsZero(m.Characters) { // not required
		return nil
	}

	if m.Characters != nil {
		if err := m.Characters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("characters")
			}
			return err
		}
	}

	return nil
}

func (m *Story) validateComics(formats strfmt.Registry) error {

	if swag.IsZero(m.Comics) { // not required
		return nil
	}

	if m.Comics != nil {
		if err := m.Comics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("comics")
			}
			return err
		}
	}

	return nil
}

func (m *Story) validateCreators(formats strfmt.Registry) error {

	if swag.IsZero(m.Creators) { // not required
		return nil
	}

	if m.Creators != nil {
		if err := m.Creators.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creators")
			}
			return err
		}
	}

	return nil
}

func (m *Story) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.Events) { // not required
		return nil
	}

	if m.Events != nil {
		if err := m.Events.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("events")
			}
			return err
		}
	}

	return nil
}

func (m *Story) validateOriginalissue(formats strfmt.Registry) error {

	if swag.IsZero(m.Originalissue) { // not required
		return nil
	}

	if m.Originalissue != nil {
		if err := m.Originalissue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalissue")
			}
			return err
		}
	}

	return nil
}

func (m *Story) validateSeries(formats strfmt.Registry) error {

	if swag.IsZero(m.Series) { // not required
		return nil
	}

	if m.Series != nil {
		if err := m.Series.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("series")
			}
			return err
		}
	}

	return nil
}

func (m *Story) validateThumbnail(formats strfmt.Registry) error {

	if swag.IsZero(m.Thumbnail) { // not required
		return nil
	}

	if m.Thumbnail != nil {
		if err := m.Thumbnail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("thumbnail")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Story) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Story) UnmarshalBinary(b []byte) error {
	var res Story
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
