// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Character character
// swagger:model Character
type Character struct {

	// A resource list containing comics which feature this character.
	Comics *ComicList `json:"comics,omitempty"`

	// A short bio or description of the character.
	Description string `json:"description,omitempty"`

	// A resource list of events in which this character appears.
	Events *EventList `json:"events,omitempty"`

	// The unique ID of the character resource.
	ID int32 `json:"id,omitempty"`

	// The date the resource was most recently modified.
	Modified string `json:"modified,omitempty"`

	// The name of the character.
	Name string `json:"name,omitempty"`

	// The canonical URL identifier for this resource.
	ResourceURI string `json:"resourceURI,omitempty"`

	// A resource list of series in which this character appears.
	Series *SeriesList `json:"series,omitempty"`

	// A resource list of stories in which this character appears.
	Stories *StoryList `json:"stories,omitempty"`

	// The representative image for this character.
	Thumbnail *Image `json:"thumbnail,omitempty"`

	// A set of public web site URLs for the resource.
	Urls []*URL `json:"urls"`
}

// Validate validates this character
func (m *Character) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThumbnail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUrls(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Character) validateComics(formats strfmt.Registry) error {

	if swag.IsZero(m.Comics) { // not required
		return nil
	}

	if m.Comics != nil {
		if err := m.Comics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("comics")
			}
			return err
		}
	}

	return nil
}

func (m *Character) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.Events) { // not required
		return nil
	}

	if m.Events != nil {
		if err := m.Events.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("events")
			}
			return err
		}
	}

	return nil
}

func (m *Character) validateSeries(formats strfmt.Registry) error {

	if swag.IsZero(m.Series) { // not required
		return nil
	}

	if m.Series != nil {
		if err := m.Series.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("series")
			}
			return err
		}
	}

	return nil
}

func (m *Character) validateStories(formats strfmt.Registry) error {

	if swag.IsZero(m.Stories) { // not required
		return nil
	}

	if m.Stories != nil {
		if err := m.Stories.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stories")
			}
			return err
		}
	}

	return nil
}

func (m *Character) validateThumbnail(formats strfmt.Registry) error {

	if swag.IsZero(m.Thumbnail) { // not required
		return nil
	}

	if m.Thumbnail != nil {
		if err := m.Thumbnail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("thumbnail")
			}
			return err
		}
	}

	return nil
}

func (m *Character) validateUrls(formats strfmt.Registry) error {

	if swag.IsZero(m.Urls) { // not required
		return nil
	}

	for i := 0; i < len(m.Urls); i++ {
		if swag.IsZero(m.Urls[i]) { // not required
			continue
		}

		if m.Urls[i] != nil {
			if err := m.Urls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("urls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Character) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Character) UnmarshalBinary(b []byte) error {
	var res Character
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
