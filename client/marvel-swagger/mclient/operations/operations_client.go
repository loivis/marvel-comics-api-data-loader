// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCharacterEventsCollection fetches lists of events filtered by a character id

Fetches lists of events in which a specific character appears, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetCharacterEventsCollection(params *GetCharacterEventsCollectionParams) (*GetCharacterEventsCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharacterEventsCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCharacterEventsCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/characters/{characterId}/events",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCharacterEventsCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharacterEventsCollectionOK), nil

}

/*
GetCharacterIndividual fetches a single character by id

This method fetches a single character resource.  It is the canonical URI for any character resource provided by the API.
*/
func (a *Client) GetCharacterIndividual(params *GetCharacterIndividualParams) (*GetCharacterIndividualOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharacterIndividualParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCharacterIndividual",
		Method:             "GET",
		PathPattern:        "/v1/public/characters/{characterId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCharacterIndividualReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharacterIndividualOK), nil

}

/*
GetCharacterSeriesCollection fetches lists of series filtered by a character id

Fetches lists of comic series in which a specific character appears, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetCharacterSeriesCollection(params *GetCharacterSeriesCollectionParams) (*GetCharacterSeriesCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharacterSeriesCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCharacterSeriesCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/characters/{characterId}/series",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCharacterSeriesCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharacterSeriesCollectionOK), nil

}

/*
GetCharacterStoryCollection fetches lists of stories filtered by a character id

Fetches lists of comic stories  featuring a specific character with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetCharacterStoryCollection(params *GetCharacterStoryCollectionParams) (*GetCharacterStoryCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharacterStoryCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCharacterStoryCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/characters/{characterId}/stories",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCharacterStoryCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharacterStoryCollectionOK), nil

}

/*
GetCharactersByStoryID fetches lists of characters filtered by a story id

Fetches lists of comic characters appearing in a single story, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetCharactersByStoryID(params *GetCharactersByStoryIDParams) (*GetCharactersByStoryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersByStoryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCharactersByStoryId",
		Method:             "GET",
		PathPattern:        "/v1/public/stories/{storyId}/characters",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCharactersByStoryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersByStoryIDOK), nil

}

/*
GetCharactersCollection fetches lists of characters

Fetches lists of comic characters with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetCharactersCollection(params *GetCharactersCollectionParams) (*GetCharactersCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCharactersCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCharactersCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/characters",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCharactersCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCharactersCollectionOK), nil

}

/*
GetComicCharacterCollection fetches lists of characters filtered by a comic id

Fetches lists of characters which appear in a specific comic with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetComicCharacterCollection(params *GetComicCharacterCollectionParams) (*GetComicCharacterCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComicCharacterCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getComicCharacterCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/comics/{comicId}/characters",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetComicCharacterCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetComicCharacterCollectionOK), nil

}

/*
GetComicIndividual fetches a single comic by id

This method fetches a single comic resource.  It is the canonical URI for any comic resource provided by the API.
*/
func (a *Client) GetComicIndividual(params *GetComicIndividualParams) (*GetComicIndividualOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComicIndividualParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getComicIndividual",
		Method:             "GET",
		PathPattern:        "/v1/public/comics/{comicId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetComicIndividualReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetComicIndividualOK), nil

}

/*
GetComicStoryCollection fetches lists of stories filtered by a comic id

Fetches lists of comic stories in a specific comic issue, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetComicStoryCollection(params *GetComicStoryCollectionParams) (*GetComicStoryCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComicStoryCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getComicStoryCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/comics/{comicId}/stories",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetComicStoryCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetComicStoryCollectionOK), nil

}

/*
GetComicsCharacterCollection fetches lists of comics filtered by a character id

Fetches lists of comics containing a specific character, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetComicsCharacterCollection(params *GetComicsCharacterCollectionParams) (*GetComicsCharacterCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComicsCharacterCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getComicsCharacterCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/characters/{characterId}/comics",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetComicsCharacterCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetComicsCharacterCollectionOK), nil

}

/*
GetComicsCollection fetches lists of comics

Fetches lists of comics with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetComicsCollection(params *GetComicsCollectionParams) (*GetComicsCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComicsCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getComicsCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/comics",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetComicsCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetComicsCollectionOK), nil

}

/*
GetComicsCollectionByCreatorID fetches lists of comics filtered by a creator id

Fetches lists of comics in which the work of a specific creator appears, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetComicsCollectionByCreatorID(params *GetComicsCollectionByCreatorIDParams) (*GetComicsCollectionByCreatorIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComicsCollectionByCreatorIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getComicsCollectionByCreatorId",
		Method:             "GET",
		PathPattern:        "/v1/public/creators/{creatorId}/comics",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetComicsCollectionByCreatorIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetComicsCollectionByCreatorIDOK), nil

}

/*
GetComicsCollectionByEventID fetches lists of comics filtered by an event id

Fetches lists of comics which take place during a specific event, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetComicsCollectionByEventID(params *GetComicsCollectionByEventIDParams) (*GetComicsCollectionByEventIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComicsCollectionByEventIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getComicsCollectionByEventId",
		Method:             "GET",
		PathPattern:        "/v1/public/events/{eventId}/comics",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetComicsCollectionByEventIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetComicsCollectionByEventIDOK), nil

}

/*
GetComicsCollectionBySeriesID fetches lists of comics filtered by a series id

Fetches lists of comics which are published as part of a specific series, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetComicsCollectionBySeriesID(params *GetComicsCollectionBySeriesIDParams) (*GetComicsCollectionBySeriesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComicsCollectionBySeriesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getComicsCollectionBySeriesId",
		Method:             "GET",
		PathPattern:        "/v1/public/series/{seriesId}/comics",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetComicsCollectionBySeriesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetComicsCollectionBySeriesIDOK), nil

}

/*
GetComicsCollectionByStoryID fetches lists of comics filtered by a story id

Fetches lists of comics in which a specific story appears, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetComicsCollectionByStoryID(params *GetComicsCollectionByStoryIDParams) (*GetComicsCollectionByStoryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComicsCollectionByStoryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getComicsCollectionByStoryId",
		Method:             "GET",
		PathPattern:        "/v1/public/stories/{storyId}/comics",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetComicsCollectionByStoryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetComicsCollectionByStoryIDOK), nil

}

/*
GetCreatorCollection fetches lists of creators

Fetches lists of comic creators with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetCreatorCollection(params *GetCreatorCollectionParams) (*GetCreatorCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCreatorCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCreatorCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/creators",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCreatorCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCreatorCollectionOK), nil

}

/*
GetCreatorCollectionByComicID fetches lists of creators filtered by a comic id

Fetches lists of comic creators whose work appears in a specific comic, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetCreatorCollectionByComicID(params *GetCreatorCollectionByComicIDParams) (*GetCreatorCollectionByComicIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCreatorCollectionByComicIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCreatorCollectionByComicId",
		Method:             "GET",
		PathPattern:        "/v1/public/comics/{comicId}/creators",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCreatorCollectionByComicIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCreatorCollectionByComicIDOK), nil

}

/*
GetCreatorCollectionByEventID fetches lists of creators filtered by an event id

Fetches lists of comic creators whose work appears in a specific event, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetCreatorCollectionByEventID(params *GetCreatorCollectionByEventIDParams) (*GetCreatorCollectionByEventIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCreatorCollectionByEventIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCreatorCollectionByEventId",
		Method:             "GET",
		PathPattern:        "/v1/public/events/{eventId}/creators",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCreatorCollectionByEventIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCreatorCollectionByEventIDOK), nil

}

/*
GetCreatorCollectionBySeriesID fetches lists of creators filtered by a series id

Fetches lists of comic creators whose work appears in a specific series, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetCreatorCollectionBySeriesID(params *GetCreatorCollectionBySeriesIDParams) (*GetCreatorCollectionBySeriesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCreatorCollectionBySeriesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCreatorCollectionBySeriesId",
		Method:             "GET",
		PathPattern:        "/v1/public/series/{seriesId}/creators",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCreatorCollectionBySeriesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCreatorCollectionBySeriesIDOK), nil

}

/*
GetCreatorCollectionByStoryID fetches lists of creators filtered by a story id

Fetches lists of comic creators whose work appears in a specific story, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetCreatorCollectionByStoryID(params *GetCreatorCollectionByStoryIDParams) (*GetCreatorCollectionByStoryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCreatorCollectionByStoryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCreatorCollectionByStoryId",
		Method:             "GET",
		PathPattern:        "/v1/public/stories/{storyId}/creators",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCreatorCollectionByStoryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCreatorCollectionByStoryIDOK), nil

}

/*
GetCreatorEventsCollection fetches lists of events filtered by a creator id

Fetches lists of events featuring the work of a specific creator with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetCreatorEventsCollection(params *GetCreatorEventsCollectionParams) (*GetCreatorEventsCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCreatorEventsCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCreatorEventsCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/creators/{creatorId}/events",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCreatorEventsCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCreatorEventsCollectionOK), nil

}

/*
GetCreatorIndividual fetches a single creator by id

This method fetches a single creator resource.  It is the canonical URI for any creator resource provided by the API.
*/
func (a *Client) GetCreatorIndividual(params *GetCreatorIndividualParams) (*GetCreatorIndividualOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCreatorIndividualParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCreatorIndividual",
		Method:             "GET",
		PathPattern:        "/v1/public/creators/{creatorId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCreatorIndividualReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCreatorIndividualOK), nil

}

/*
GetCreatorSeriesCollection fetches lists of series filtered by a creator id

Fetches lists of comic series in which a specific creator's work appears, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetCreatorSeriesCollection(params *GetCreatorSeriesCollectionParams) (*GetCreatorSeriesCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCreatorSeriesCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCreatorSeriesCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/creators/{creatorId}/series",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCreatorSeriesCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCreatorSeriesCollectionOK), nil

}

/*
GetCreatorStoryCollection fetches lists of stories filtered by a creator id

Fetches lists of comic stories by a specific creator with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetCreatorStoryCollection(params *GetCreatorStoryCollectionParams) (*GetCreatorStoryCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCreatorStoryCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCreatorStoryCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/creators/{creatorId}/stories",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCreatorStoryCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCreatorStoryCollectionOK), nil

}

/*
GetEventCharacterCollection fetches lists of characters filtered by an event id

Fetches lists of characters which appear in a specific event, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetEventCharacterCollection(params *GetEventCharacterCollectionParams) (*GetEventCharacterCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventCharacterCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventCharacterCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/events/{eventId}/characters",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventCharacterCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventCharacterCollectionOK), nil

}

/*
GetEventIndividual fetches a single event by id

This method fetches a single event resource.  It is the canonical URI for any event resource provided by the API.
*/
func (a *Client) GetEventIndividual(params *GetEventIndividualParams) (*GetEventIndividualOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventIndividualParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventIndividual",
		Method:             "GET",
		PathPattern:        "/v1/public/events/{eventId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventIndividualReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventIndividualOK), nil

}

/*
GetEventSeriesCollection fetches lists of series filtered by an event id

Fetches lists of comic series in which a specific event takes place, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetEventSeriesCollection(params *GetEventSeriesCollectionParams) (*GetEventSeriesCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventSeriesCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventSeriesCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/events/{eventId}/series",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventSeriesCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventSeriesCollectionOK), nil

}

/*
GetEventStoryCollection fetches lists of stories filtered by an event id

Fetches lists of comic stories from a specific event, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetEventStoryCollection(params *GetEventStoryCollectionParams) (*GetEventStoryCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventStoryCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventStoryCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/events/{eventId}/stories",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventStoryCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventStoryCollectionOK), nil

}

/*
GetEventsCollection fetches lists of events

Fetches lists of events with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetEventsCollection(params *GetEventsCollectionParams) (*GetEventsCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventsCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/events",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventsCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventsCollectionOK), nil

}

/*
GetEventsCollectionBySeriesID fetches lists of events filtered by a series id

Fetches lists of events which occur in a specific series, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetEventsCollectionBySeriesID(params *GetEventsCollectionBySeriesIDParams) (*GetEventsCollectionBySeriesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsCollectionBySeriesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventsCollectionBySeriesId",
		Method:             "GET",
		PathPattern:        "/v1/public/series/{seriesId}/events",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventsCollectionBySeriesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventsCollectionBySeriesIDOK), nil

}

/*
GetEventsCollectionByStoryID fetches lists of events filtered by a story id

Fetches lists of events in which a specific story appears, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetEventsCollectionByStoryID(params *GetEventsCollectionByStoryIDParams) (*GetEventsCollectionByStoryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsCollectionByStoryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventsCollectionByStoryId",
		Method:             "GET",
		PathPattern:        "/v1/public/stories/{storyId}/events",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventsCollectionByStoryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventsCollectionByStoryIDOK), nil

}

/*
GetIssueEventsCollection fetches lists of events filtered by a comic id

Fetches lists of events in which a specific comic appears, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetIssueEventsCollection(params *GetIssueEventsCollectionParams) (*GetIssueEventsCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIssueEventsCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIssueEventsCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/comics/{comicId}/events",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIssueEventsCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIssueEventsCollectionOK), nil

}

/*
GetSeriesCharacterWrapper fetches lists of characters filtered by a series id

Fetches lists of characters which appear in specific series, with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetSeriesCharacterWrapper(params *GetSeriesCharacterWrapperParams) (*GetSeriesCharacterWrapperOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeriesCharacterWrapperParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSeriesCharacterWrapper",
		Method:             "GET",
		PathPattern:        "/v1/public/series/{seriesId}/characters",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSeriesCharacterWrapperReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSeriesCharacterWrapperOK), nil

}

/*
GetSeriesCollection fetches lists of series

Fetches lists of comic series with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetSeriesCollection(params *GetSeriesCollectionParams) (*GetSeriesCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeriesCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSeriesCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/series",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSeriesCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSeriesCollectionOK), nil

}

/*
GetSeriesIndividual fetches a single comic series by id

This method fetches a single comic series resource.  It is the canonical URI for any comic series resource provided by the API.
*/
func (a *Client) GetSeriesIndividual(params *GetSeriesIndividualParams) (*GetSeriesIndividualOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeriesIndividualParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSeriesIndividual",
		Method:             "GET",
		PathPattern:        "/v1/public/series/{seriesId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSeriesIndividualReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSeriesIndividualOK), nil

}

/*
GetSeriesStoryCollection fetches lists of stories filtered by a series id

Fetches lists of comic stories from a specific series with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetSeriesStoryCollection(params *GetSeriesStoryCollectionParams) (*GetSeriesStoryCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSeriesStoryCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSeriesStoryCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/series/{seriesId}/stories",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSeriesStoryCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSeriesStoryCollectionOK), nil

}

/*
GetStoryCollection fetches lists of stories

Fetches lists of comic stories with optional filters. See notes on individual parameters below.
*/
func (a *Client) GetStoryCollection(params *GetStoryCollectionParams) (*GetStoryCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoryCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStoryCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/stories",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStoryCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStoryCollectionOK), nil

}

/*
GetStoryIndividual fetches a single comic story by id

This method fetches a single comic story resource.  It is the canonical URI for any comic story resource provided by the API.
*/
func (a *Client) GetStoryIndividual(params *GetStoryIndividualParams) (*GetStoryIndividualOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoryIndividualParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStoryIndividual",
		Method:             "GET",
		PathPattern:        "/v1/public/stories/{storyId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStoryIndividualReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStoryIndividualOK), nil

}

/*
GetStorySeriesCollection fetches lists of series filtered by a story id

Fetches lists of comic series in which the specified story takes place. See notes on individual parameters below.
*/
func (a *Client) GetStorySeriesCollection(params *GetStorySeriesCollectionParams) (*GetStorySeriesCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorySeriesCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStorySeriesCollection",
		Method:             "GET",
		PathPattern:        "/v1/public/stories/{storyId}/series",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStorySeriesCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStorySeriesCollectionOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
