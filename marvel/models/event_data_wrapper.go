// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// EventDataWrapper event data wrapper
// swagger:model EventDataWrapper
type EventDataWrapper struct {

	// An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API.
	AttributionHTML string `json:"attributionHTML,omitempty"`

	// The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API.
	AttributionText string `json:"attributionText,omitempty"`

	// The HTTP status code of the returned result.
	Code int32 `json:"code,omitempty"`

	// The copyright notice for the returned result.
	Copyright string `json:"copyright,omitempty"`

	// The results returned by the call.
	Data *EventDataContainer `json:"data,omitempty"`

	// A digest value of the content returned by the call.
	Etag string `json:"etag,omitempty"`

	// A string description of the call status.
	Status string `json:"status,omitempty"`
}

// Validate validates this event data wrapper
func (m *EventDataWrapper) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventDataWrapper) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventDataWrapper) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventDataWrapper) UnmarshalBinary(b []byte) error {
	var res EventDataWrapper
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
