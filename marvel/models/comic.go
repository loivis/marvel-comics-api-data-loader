// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Comic comic
// swagger:model Comic
type Comic struct {

	// A resource list containing the characters which appear in this comic.
	Characters *CharacterList `json:"characters,omitempty"`

	// A list of issues collected in this comic (will generally be empty for periodical formats such as "comic" or "magazine").
	CollectedIssues []*ComicSummary `json:"collectedIssues"`

	// A list of collections which include this comic (will generally be empty if the comic's format is a collection).
	Collections []*ComicSummary `json:"collections"`

	// A resource list containing the creators associated with this comic.
	Creators *CreatorList `json:"creators,omitempty"`

	// A list of key dates for this comic.
	Dates []*ComicDate `json:"dates"`

	// The preferred description of the comic.
	Description string `json:"description,omitempty"`

	// The Diamond code for the comic.
	DiamondCode string `json:"diamondCode,omitempty"`

	// The ID of the digital comic representation of this comic. Will be 0 if the comic is not available digitally.
	DigitalID int32 `json:"digitalId,omitempty"`

	// The EAN barcode for the comic.
	Ean string `json:"ean,omitempty"`

	// A resource list containing the events in which this comic appears.
	Events *EventList `json:"events,omitempty"`

	// The publication format of the comic e.g. comic, hardcover, trade paperback.
	Format string `json:"format,omitempty"`

	// The unique ID of the comic resource.
	ID int32 `json:"id,omitempty"`

	// A list of promotional images associated with this comic.
	Images []*Image `json:"images"`

	// The ISBN for the comic (generally only populated for collection formats).
	Isbn string `json:"isbn,omitempty"`

	// The ISSN barcode for the comic.
	Issn string `json:"issn,omitempty"`

	// The number of the issue in the series (will generally be 0 for collection formats).
	IssueNumber float64 `json:"issueNumber,omitempty"`

	// The date the resource was most recently modified.
	Modified string `json:"modified,omitempty"`

	// The number of story pages in the comic.
	PageCount int32 `json:"pageCount,omitempty"`

	// A list of prices for this comic.
	Prices []*ComicPrice `json:"prices"`

	// The canonical URL identifier for this resource.
	ResourceURI string `json:"resourceURI,omitempty"`

	// A summary representation of the series to which this comic belongs.
	Series *SeriesSummary `json:"series,omitempty"`

	// A resource list containing the stories which appear in this comic.
	Stories *StoryList `json:"stories,omitempty"`

	// A set of descriptive text blurbs for the comic.
	TextObjects []*TextObject `json:"textObjects"`

	// The representative image for this comic.
	Thumbnail *Image `json:"thumbnail,omitempty"`

	// The canonical title of the comic.
	Title string `json:"title,omitempty"`

	// The UPC barcode number for the comic (generally only populated for periodical formats).
	Upc string `json:"upc,omitempty"`

	// A set of public web site URLs for the resource.
	Urls []*URL `json:"urls"`

	// If the issue is a variant (e.g. an alternate cover, second printing, or directorâ€™s cut), a text description of the variant.
	VariantDescription string `json:"variantDescription,omitempty"`

	// A list of variant issues for this comic (includes the "original" issue if the current issue is a variant).
	Variants []*ComicSummary `json:"variants"`
}

// Validate validates this comic
func (m *Comic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCharacters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCollectedIssues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCollections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTextObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThumbnail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUrls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariants(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Comic) validateCharacters(formats strfmt.Registry) error {

	if swag.IsZero(m.Characters) { // not required
		return nil
	}

	if m.Characters != nil {
		if err := m.Characters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("characters")
			}
			return err
		}
	}

	return nil
}

func (m *Comic) validateCollectedIssues(formats strfmt.Registry) error {

	if swag.IsZero(m.CollectedIssues) { // not required
		return nil
	}

	for i := 0; i < len(m.CollectedIssues); i++ {
		if swag.IsZero(m.CollectedIssues[i]) { // not required
			continue
		}

		if m.CollectedIssues[i] != nil {
			if err := m.CollectedIssues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("collectedIssues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Comic) validateCollections(formats strfmt.Registry) error {

	if swag.IsZero(m.Collections) { // not required
		return nil
	}

	for i := 0; i < len(m.Collections); i++ {
		if swag.IsZero(m.Collections[i]) { // not required
			continue
		}

		if m.Collections[i] != nil {
			if err := m.Collections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("collections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Comic) validateCreators(formats strfmt.Registry) error {

	if swag.IsZero(m.Creators) { // not required
		return nil
	}

	if m.Creators != nil {
		if err := m.Creators.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creators")
			}
			return err
		}
	}

	return nil
}

func (m *Comic) validateDates(formats strfmt.Registry) error {

	if swag.IsZero(m.Dates) { // not required
		return nil
	}

	for i := 0; i < len(m.Dates); i++ {
		if swag.IsZero(m.Dates[i]) { // not required
			continue
		}

		if m.Dates[i] != nil {
			if err := m.Dates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Comic) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.Events) { // not required
		return nil
	}

	if m.Events != nil {
		if err := m.Events.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("events")
			}
			return err
		}
	}

	return nil
}

func (m *Comic) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	for i := 0; i < len(m.Images); i++ {
		if swag.IsZero(m.Images[i]) { // not required
			continue
		}

		if m.Images[i] != nil {
			if err := m.Images[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Comic) validatePrices(formats strfmt.Registry) error {

	if swag.IsZero(m.Prices) { // not required
		return nil
	}

	for i := 0; i < len(m.Prices); i++ {
		if swag.IsZero(m.Prices[i]) { // not required
			continue
		}

		if m.Prices[i] != nil {
			if err := m.Prices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("prices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Comic) validateSeries(formats strfmt.Registry) error {

	if swag.IsZero(m.Series) { // not required
		return nil
	}

	if m.Series != nil {
		if err := m.Series.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("series")
			}
			return err
		}
	}

	return nil
}

func (m *Comic) validateStories(formats strfmt.Registry) error {

	if swag.IsZero(m.Stories) { // not required
		return nil
	}

	if m.Stories != nil {
		if err := m.Stories.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stories")
			}
			return err
		}
	}

	return nil
}

func (m *Comic) validateTextObjects(formats strfmt.Registry) error {

	if swag.IsZero(m.TextObjects) { // not required
		return nil
	}

	for i := 0; i < len(m.TextObjects); i++ {
		if swag.IsZero(m.TextObjects[i]) { // not required
			continue
		}

		if m.TextObjects[i] != nil {
			if err := m.TextObjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("textObjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Comic) validateThumbnail(formats strfmt.Registry) error {

	if swag.IsZero(m.Thumbnail) { // not required
		return nil
	}

	if m.Thumbnail != nil {
		if err := m.Thumbnail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("thumbnail")
			}
			return err
		}
	}

	return nil
}

func (m *Comic) validateUrls(formats strfmt.Registry) error {

	if swag.IsZero(m.Urls) { // not required
		return nil
	}

	for i := 0; i < len(m.Urls); i++ {
		if swag.IsZero(m.Urls[i]) { // not required
			continue
		}

		if m.Urls[i] != nil {
			if err := m.Urls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("urls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Comic) validateVariants(formats strfmt.Registry) error {

	if swag.IsZero(m.Variants) { // not required
		return nil
	}

	for i := 0; i < len(m.Variants); i++ {
		if swag.IsZero(m.Variants[i]) { // not required
			continue
		}

		if m.Variants[i] != nil {
			if err := m.Variants[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Comic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Comic) UnmarshalBinary(b []byte) error {
	var res Comic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
